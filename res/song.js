const { MessageEmbed } = require('discord.js');
const youtube = require('ytdl-core');

const SongArgumentError = async (message) => {
    const SongInfoEmbed = new MessageEmbed()
        .setColor("#e534eb")
        .setTitle("‚ùå Erro ‚ùå")
        .addField("Argumento:", "Schwi precisa de um link para poder tocar alguma m√∫sica")

    message.channel.send(SongInfoEmbed)
}

const NonValidateUrl = async (message) => {
    const SongInfoEmbed = new MessageEmbed()
        .setColor("#e534eb")
        .setTitle("‚ùå Erro ‚ùå")
        .addField("M√∫sica n√£o encontrada:", "Link inv√°lido")

    await message.channel.send(SongInfoEmbed)
}

const NotInVoiceChannel = async (message) => {
    const ErrorEmbed = new MessageEmbed()
    .setColor("#e534eb")
    .setTitle("‚ùå Erro ‚ùå")
    .addField("Conex√£o:", "Voc√™ n√£o est√° conectado a um canal de voz")

    await message.channel.send(ErrorEmbed)
}

const NowPlaying = async (message, info)  => {
    const SongInfoEmbed = new MessageEmbed()
                .setColor("#e534eb")
                .setTitle("üé∂ Tocando Agora üé∂")
                .addField("T√≠tulo:", info.Title)
                .addField("Canal:", info.Author)
                .addField("üëçLikes:", info.Likes, true)
                .addField("üëéDislikes:", info.Deslikes, true);
    await message.channel.send(SongInfoEmbed)
}

const NextSong = async (message) => {
    const SongInfoEmbed = new MessageEmbed()
                    .setColor("#e534eb")
                    .setTitle("üé∂ Indo para a pr√≥xima m√∫sica üé∂")
    await message.channel.send(SongInfoEmbed)
}

const Disconnect = async (message) => {
    const SongInfoEmbed = new MessageEmbed()
                    .setColor("#e534eb")
                    .setTitle("Good Byeüñê")
                    .addField("Desconectando","Nenhuma m√∫sica detectada na fila")
    await message.channel.send(SongInfoEmbed)
}

const StopDisconnect = async (message) => {
    const SongInfoEmbed = new MessageEmbed()
            .setColor("#e534eb")
            .setTitle("‚ùå Parando a m√∫sica ‚ùå")
            .addField("Desconectando...", "At√© mais")
    await message.channel.send(SongInfoEmbed)
}

const AddToQueue = async (message, info) => {
    const SongInfoEmbed = new MessageEmbed()
                .setColor("#e534eb")
                .setTitle("üé∂ Adicionada √† fila de reprodu√ß√£o üé∂")
                .addField("T√≠tulo:", info.Title)
                .addField("Canal:", info.Author)
    await message.channel.send(SongInfoEmbed)
}

const NoSongPlaying = async (message) => {
    const SongInfoEmbed = new MessageEmbed()
            .setColor("#e534eb")
            .setTitle("‚ùå Nenhuma m√∫sica tocando ‚ùå")
            .addField("Dica", "Tente colocar algo para tocar üòâ")
    await message.channel.send(SongInfoEmbed)
}

const NoQueue = async (message) => {
    const queueList = new MessageEmbed()
    .setColor('#e534eb')
    .setTitle("Lista de Reprodu√ß√£o vazia")
    await message.channel.send(queueList)
}

const GenerateList = async (message, listInfo) => {
    const queueList = new MessageEmbed()
            .setTitle(`Lista de Reprodu√ß√£o\n`)
            .setColor("#e534eb")
            .addField(`Servidor: `,message.guild.name, true)
            .addField('üé∂ M√∫sicas üé∂', listInfo);
        await message.channel.send(queueList)
}

const FindMessages = async (message, Id) => {
    Id.forEach(async element => {
        try {
            let msg = await message.channel.messages.fetch(element)
            msg.delete()
        } catch (error) {
            message.channel.send("N√£o foi poss√≠vel deletar as menssagens")
        }
    });
}

async function GetVideoDetails(url){
    let video = await youtube.getInfo(url)
    let Song = {
        Url: url,
        Title: video.videoDetails.title,
        Author: video.videoDetails.author.name,
        Likes: video.videoDetails.likes,
        Deslikes: video.videoDetails.dislikes
    }
   return Song; 
}


module.exports = {
    SongArgumentError,
    NonValidateUrl,
    NotInVoiceChannel,
    NextSong,
    Disconnect,
    StopDisconnect,
    AddToQueue,
    FindMessages, 
    NoSongPlaying,
    NowPlaying,
    GetVideoDetails,
    NoQueue,
    GenerateList
}